/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.netbeans.modules.java.hints.generator.ui;

import java.awt.BorderLayout;
import java.awt.Dialog;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.BiFunction;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.openide.*;
import org.openide.util.Exceptions;
import org.openide.util.RequestProcessor;

/**
 *
 * @author lahvac
 */
public class ProgressDialog extends javax.swing.JPanel {

    private static RequestProcessor WORKER = new RequestProcessor(AdaptiveRefactoringAction.class.getName(), 1, false, false);

    public static <R> R showProgress(String title, BiFunction<ProgressHandle, AtomicBoolean, R> handle2Worker) {
        Dialog[] d = new Dialog[1];
        ProgressHandle progress = ProgressHandleFactory.createHandle(title);
        AtomicBoolean cancel = new AtomicBoolean();
        DialogDescriptor dd = new DialogDescriptor(new ProgressDialog(progress),
                                                   title,
                                                   true,
                                                   new Object[] {DialogDescriptor.CANCEL_OPTION},
                                                   DialogDescriptor.CANCEL_OPTION,
                                                   DialogDescriptor.DEFAULT_ALIGN,
                                                   null,
                                                   e -> { cancel.set(true); d[0].setVisible(false); d[0].dispose(); });

        d[0] = DialogDisplayer.getDefault().createDialog(dd);

        Object[] result = new Object[1];
        
        WORKER.post(new Runnable() {
            public void run() {
                try {
                    result[0] = handle2Worker.apply(progress, cancel);
                } catch (Exception ex) {
                    Exceptions.printStackTrace(ex);
                }

                d[0].setVisible(false);
                d[0].dispose();
            }
        });

        d[0].setVisible(true);

        return (R) result[0];
    }

    private final ProgressHandle handle;

    /**
     * Creates new form ProgressDialog
     */
    public ProgressDialog(ProgressHandle handle) {
        this.handle = handle;
        initComponents();
        progressPanel.add(ProgressHandleFactory.createProgressComponent(handle), BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        details = ProgressHandleFactory.createDetailLabelComponent(handle)
        ;
        progressPanel = new javax.swing.JPanel();

        org.openide.awt.Mnemonics.setLocalizedText(details, org.openide.util.NbBundle.getMessage(ProgressDialog.class, "ProgressDialog.details.text", new Object[] {})); // NOI18N

        progressPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(details, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(progressPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(details)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel details;
    private javax.swing.JPanel progressPanel;
    // End of variables declaration//GEN-END:variables
}
