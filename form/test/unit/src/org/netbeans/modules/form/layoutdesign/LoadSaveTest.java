/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.netbeans.modules.form.layoutdesign;

import java.awt.EventQueue;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;
import org.netbeans.junit.NbTestCase;
import org.netbeans.modules.form.FormModel;
import org.netbeans.modules.form.GandalfPersistenceManager;
import org.netbeans.modules.form.PersistenceException;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;

/**
 *
 * @author lahvac
 */
public class LoadSaveTest extends NbTestCase {

    private FileObject scratch;

    public LoadSaveTest(String name) {
        super(name);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        clearWorkDir();
        scratch = FileUtil.toFileObject(getWorkDir());
        assertNotNull(scratch);
    }
    
    public void testHeader() throws Exception{
        FileObject java =
                create("Test.java",
                       "package scratch;\n" +
                       "public class Test extends javax.swing.JPanel {\n" +
                       "    public Test() {\n" +
                       "        initComponents();\n" +
                       "    }\n" +
                       "\n" +
                       "    /**\n" +
                       "     * This method is called from within the constructor to initialize the form.\n" +
                       "     * WARNING: Do NOT modify this code. The content of this method is always\n" +
                       "     * regenerated by the Form Editor.\n" +
                       "     */\n" +
                       "    @SuppressWarnings(\"unchecked\")\n" +
                       "    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n" +
                       "    private void initComponents() {\n" +
                       "\n" +
                       "        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n" +
                       "        this.setLayout(layout);\n" +
                       "        layout.setHorizontalGroup(\n" +
                       "            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n" +
                       "            .addGap(0, 400, Short.MAX_VALUE)\n" +
                       "        );\n" +
                       "        layout.setVerticalGroup(\n" +
                       "            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n" +
                       "            .addGap(0, 300, Short.MAX_VALUE)\n" +
                       "        );\n" +
                       "    }// </editor-fold>//GEN-END:initComponents\n" +
                       "\n" +
                       "\n" +
                       "    // Variables declaration - do not modify//GEN-BEGIN:variables\n" +
                       "    // End of variables declaration//GEN-END:variables\n" +
                       "}");
        String formCode =
                       "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n" +
                       "\n" +
                       "<!--test header\n" +
                       "  - test header\n" +
                       "  - test header\n" +
                       "  -->\n" +
                       "\n" +
                       "<Form version=\"1.3\" maxVersion=\"1.9\" type=\"org.netbeans.modules.form.forminfo.JPanelFormInfo\">\n" +
                       "  <AuxValues>\n" +
                       "    <AuxValue name=\"FormSettings_autoResourcing\" type=\"java.lang.Integer\" value=\"0\"/>\n" +
                       "    <AuxValue name=\"FormSettings_autoSetComponentName\" type=\"java.lang.Boolean\" value=\"false\"/>\n" +
                       "    <AuxValue name=\"FormSettings_generateFQN\" type=\"java.lang.Boolean\" value=\"true\"/>\n" +
                       "    <AuxValue name=\"FormSettings_generateMnemonicsCode\" type=\"java.lang.Boolean\" value=\"false\"/>\n" +
                       "    <AuxValue name=\"FormSettings_i18nAutoMode\" type=\"java.lang.Boolean\" value=\"false\"/>\n" +
                       "    <AuxValue name=\"FormSettings_layoutCodeTarget\" type=\"java.lang.Integer\" value=\"1\"/>\n" +
                       "    <AuxValue name=\"FormSettings_listenerGenerationStyle\" type=\"java.lang.Integer\" value=\"0\"/>\n" +
                       "    <AuxValue name=\"FormSettings_variablesLocal\" type=\"java.lang.Boolean\" value=\"false\"/>\n" +
                       "    <AuxValue name=\"FormSettings_variablesModifier\" type=\"java.lang.Integer\" value=\"2\"/>\n" +
                       "  </AuxValues>\n" +
                       "\n" +
                       "  <Layout>\n" +
                       "    <DimensionLayout dim=\"0\">\n" +
                       "      <Group type=\"103\" groupAlignment=\"0\" attributes=\"0\">\n" +
                       "          <EmptySpace min=\"0\" pref=\"400\" max=\"32767\" attributes=\"0\"/>\n" +
                       "      </Group>\n" +
                       "    </DimensionLayout>\n" +
                       "    <DimensionLayout dim=\"1\">\n" +
                       "      <Group type=\"103\" groupAlignment=\"0\" attributes=\"0\">\n" +
                       "          <EmptySpace min=\"0\" pref=\"300\" max=\"32767\" attributes=\"0\"/>\n" +
                       "      </Group>\n" +
                       "    </DimensionLayout>\n" +
                       "  </Layout>\n" +
                       "</Form>\n";

        FileObject form = create("Test.form", formCode);

        FormModel fm = loadForm(form);
        
        saveForm(form, fm);
        
        assertEquals(formCode, form.asText());
    }
    
    private FileObject create(String path, String content) throws IOException {
        FileObject java = FileUtil.createData(scratch, path);

        try (Writer w = new OutputStreamWriter(java.getOutputStream())) {
            w.write(content);
        }

        return java;
    }
    
    private FormModel loadForm(final FileObject file) {
        final FormModel[] fm = new FormModel[1];
        final Exception[] failure = new Exception[1];
        try {
            EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    try {
//                        hackFormLAF(true);
                        List<Throwable> errors = new ArrayList<Throwable>();

                        fm[0] = new GandalfPersistenceManager().loadForm(file, file, null, errors);

                        if (errors.size() > 0) {
                            System.out.println("There were errors while loading the form: ");
                            for (Throwable er : errors) {
                                er.printStackTrace();
                            }
                        }
                    } catch (PersistenceException pe) {
                        failure[0] = pe;
                    } finally {
//                        hackFormLAF(false);
                    }
                }
            });
        } catch (Exception ex) {
            fail(ex.toString());
        }
        if (failure[0] != null) {
            fail(failure[0].toString());
        }
        return fm[0];
    }

    private void saveForm(final FileObject file, final FormModel fm) {
        final Exception[] failure = new Exception[1];
        try {
            EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    try {
//                        hackFormLAF(true);
                        List<Throwable> errors = new ArrayList<Throwable>();

                        new GandalfPersistenceManager().saveForm(file, fm, errors);

                        if (errors.size() > 0) {
                            System.out.println("There were errors while loading the form: ");
                            for (Throwable er : errors) {
                                er.printStackTrace();
                            }
                        }
                    } catch (PersistenceException pe) {
                        failure[0] = pe;
                    } finally {
//                        hackFormLAF(false);
                    }
                }
            });
        } catch (Exception ex) {
            fail(ex.toString());
        }
        if (failure[0] != null) {
            fail(failure[0].toString());
        }
    }
}
